  // EnFCM.cpp: 主项目文件。
// Enhanced fuzzy c-means propsoed by Szilágyi et al.
// programmed by iamzxf


#include "stdafx.h"
#include "cv.h"
#include "highgui.h"
#include "cxcore.h"
#include "time.h"
#include "windows.h"
using namespace System;

#define alpha 0.0000000001
#define cluster_n 3
#define LEVEL 256
#define mm 2
#define iters 200
#define thres 0.00001

int histogram[LEVEL];
double membership[cluster_n][LEVEL];
double distance[iters];


int main(array<System::String ^> ^args)
{
	
	IplImage *pImg, *newImg,*finalImg;
	uchar *data,*newdata,*finaldata;
	int width,height,channels,step,depth;	


	pImg=cvLoadImage("ssar2_noise_mix.bmp",0);	
	
	if(!pImg){
		printf("cannot load the file.\n");
		return -1;
	}
	
	width=pImg->width;
	height=pImg->height;	
	depth=pImg->depth;
	step=pImg->widthStep;
	channels=pImg->nChannels;

	data=(uchar *) pImg->imageData;

	
	newImg=cvCreateImage(cvSize(width,height),depth,channels);//生成空图
	newdata=(uchar *)newImg->imageData;

	finalImg=cvCreateImage(cvSize(width,height),depth,channels);//生成空图
	finaldata=(uchar *)finalImg->imageData;
	
	int i,j;
	int m,n;
	int left,right,up,down;
	int num_neigh;
	double um;
	int it;
	int gray,k,kk;
	SYSTEMTIME sys;
	
	double member_sum;
	double center[cluster_n];
	//filter
	
	GetLocalTime( &sys); 
	printf("\nthe time is %d,%d.%d\n",sys.wMinute,sys.wSecond,sys.wMilliseconds);

	for(i=0;i<height;i++)
	{
		for(j=0;j<width;j++)
		{
			newdata[i*step+j]=0;			
		}
	}

	for(i=0;i<LEVEL;i++)
		histogram[i]=0;//histogram of the filtered image


	for(i=0;i<height;i++)
	{
		for(j=0;j<width;j++)
		{
			num_neigh=0;
			up=i-1;
			down=i+1;
			left=j-1;
			right=j+1;

			if(up<0) up=0;
			if(down>height) down=height;
			if(left<0) left=0;
			if(right>width) right=width;

			for(m=up;m<=down;m++)
			{
				for(n=left;n<=right;n++)
				{
					newdata[i*step+j]+=data[m*step+n];
					num_neigh++;
				}
			}
		
			gray=(int)((newdata[i*step+j]-data[i*step+j])*alpha/(num_neigh-1)+data[i*step+j])/(1+alpha);
			newdata[i*step+j]=gray;
			histogram[gray]++;

		}
	}

	//initialize the membership matrix  membership[cluster_n][LEVEL];
	

	srand((int)time(0));

	for(i=0;i<LEVEL;i++)
	{
		member_sum=0;
		for(j=0;j<cluster_n;j++)
		{			
			membership[j][i]=rand()+1;
			member_sum+=membership[j][i];
		}

		for(j=0;j<cluster_n;j++)
			membership[j][i]/=member_sum;	
	}

	

	//initialize the center


	for(i=0;i<cluster_n;i++)
	{
		center[i]=0;
		um=0;
		for(j=0;j<LEVEL;j++)
		{
			center[i]+=histogram[j]*pow(membership[i][j],mm)*j;
			um+=histogram[j]*pow(membership[i][j],mm);
		}

		center[i]/=um;
	}

	for(i=0;i<cluster_n;i++)
	{
		printf("center[%d]=%f \n",i+1,center[i]);
	//	center[i]+=eps;
	}
	//initialize the distance


	for(i=0;i<iters;i++)
		distance[i]=0;

	for(i=0;i<cluster_n;i++)
	{
		for(j=0;j<LEVEL;j++)
		{
			distance[0]+=histogram[j]*pow(membership[i][j],mm)*pow((j-center[i]),2);
		}
	}

	printf("the distance in the %3d-step is %.4f\n",1,distance[0]);

	double temp_sum;
	for(it=1;it<iters;it++)
	{

		// update the membership matrix
		temp_sum=0;

		for(i=0;i<cluster_n;i++)
		{
			for(j=0;j<LEVEL;j++)
			{
				membership[i][j]=0;			

				for(k=0;k<cluster_n;k++)
				{
					membership[i][j]+=pow(abs(j-center[i])/abs(j-center[k]),2/(mm-1));
				}

				membership[i][j]=1/membership[i][j];
			}
		}

	//update the center

		for(i=0;i<cluster_n;i++)
		{
			center[i]=0;
			um=0;
			for(j=0;j<LEVEL;j++)
			{
				center[i]+=histogram[j]*pow(membership[i][j],mm)*j;
				um+=histogram[j]*pow(membership[i][j],mm);
			}

			center[i]/=um;
		}

	//update the distance

		for(i=0;i<cluster_n;i++)
		{
			for(j=0;j<LEVEL;j++)
			{
				distance[it]+=histogram[j]*pow(membership[i][j],mm)*pow((j-center[i]),2);
			}
		}
		printf("the distance in the %3d-step is %.4f\n",it+1,distance[it]);

		if(abs(distance[it]-distance[it-1])<thres || distance[it]>distance[it-1])
			break;

	}
	for(i=0;i<cluster_n;i++)
	{
		printf("center[%d]=%f \n",i+1,center[i]);
		//	center[i]+=eps;
	}

	GetLocalTime( &sys); 
	printf("\nthe time is %d,%d.%d\n",sys.wMinute,sys.wSecond,sys.wMilliseconds);
	
	//segmentation result

	for(i=0;i<height;i++)
	{
		for(j=0;j<width;j++)
		{
			kk=0;
			gray=data[i*step+j];
			for(k=1;k<cluster_n;k++)
			{
				if (membership[k][gray]>membership[kk][gray])
					kk=k;
			}
			int count =0;
			for(int k=0;k<cluster_n;k++)
			{
				if(center[kk]<center[k])count++;
			}
			//更新分割图像的像素值
			finaldata[i*step+j]=255*(cluster_n-1-count)/(cluster_n-1);
			//cvSet2D(newImg,i,j,s);
		}
	}
	float vpc=0;
	float vpe=0;
	//int n=height*width;
	 FILE *F;
	 F=fopen((char *)"vpc_vpe_test.txt","w");
	for(int i=0;i<height;i++)
	{
      for(int j=0;j<width;j++)
	  {
		  gray=data[i*step+j];
        for(int k=0;k<cluster_n;k++)
		{
            vpc+=pow(membership[k][gray],2);
            if(membership[k][gray]>0)
                vpe+=(float)((log(membership[k][gray])*membership[k][gray])/log(2.0));
		}
	  }
	}
    vpc=vpc/(height*width);
    vpe=-vpe/(height*width);
    fprintf(F,"vpc=%.4f, vpe=%.4f\n",vpc,vpe);
	cvSaveImage("ssar2_noise_mix_enfcm.bmp",finalImg);

	cvNamedWindow("Image",1);
	cvShowImage("Image",pImg);

	cvNamedWindow("newImg",1);
	cvShowImage("newImg",newImg);

	cvNamedWindow("finalImg",1);
	cvShowImage("finalImg",finalImg);


	
	cvWaitKey(0);
	cvDestroyWindow("Image");
	cvDestroyWindow("newImg");
	cvDestroyWindow("finalImg");

	cvReleaseImage(&pImg);
	cvReleaseImage(&newImg);
	cvReleaseImage(&finalImg);

	return 0;
}
